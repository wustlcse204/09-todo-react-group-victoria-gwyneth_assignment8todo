{"version":3,"sources":["todo.js","NewTodo.js","App.js","index.js"],"names":["Todo","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","id","completed","input","check","bind","assertThisInitialized","event","currComponent","target","parentNode","xhttp4","XMLHttpRequest","onreadystatechange","readyState","status","setState","open","setRequestHeader","send","JSON","stringify","classNameVar","react_default","a","createElement","className","onClick","delete","type","text","Component","NewTodo","_React$createElement","placeholder","defineProperty","onChange","addToDos","App","todos","componentDidMount","sortAlphabetically","xhttp","todosResponse","parse","responseText","console","log","preventDefault","xhttp2","value","toConsumableArray","concat","deleting","xhttp3","remainingTodos","filter","todo","sort","b","localeCompare","_this2","class","src_NewTodo_0","map","src_todo_0","key","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.fb4dbb42.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './todo.css';\n\nclass Todo extends Component {\n  constructor(props){\n    super(props);\n    this.state = {id: this.props.id, completed: this.props.completed, input: ''}; // fix state / what should my input even be??? / need render() fixed.\n    this.check = this.check.bind(this); // 12/1 @ 12:24 PM -- Added \".bind\"\n  }\n\n  check(event) {\n    var currComponent= this;\n    var check = event.target.parentNode.id;\n    var value = {completed: true};\n    var xhttp4 = new XMLHttpRequest();\n    xhttp4.onreadystatechange = function () {\n      if (this.readyState === 4 && this.status === 200) {\n        // save new Todo to check\n        currComponent.setState({completed: true});\n      }\n    }\n    xhttp4.open(\"PUT\", \"https://cse204.work/todos/\" + check, true);\n    xhttp4.setRequestHeader(\"Content-type\", \"application/json\");\n    xhttp4.setRequestHeader(\"x-api-key\", \"e678e1-b3de89-352f09-13b587-042016\");\n    xhttp4.send(JSON.stringify(value));\n  }\n\n  render() { // fix this render()\n    var classNameVar = \"todo\";\n    // this.check = {completed: this.props.completed};\n    if (this.state.completed) {\n      classNameVar = \"todo completed\";\n    }\n    return (\n        <div id= {this.props.id} className = {classNameVar}> \n            <button className=\"button\" onClick={this.props.delete}>DELETE</button>\n            <input id= \"checked\" className=\"checkbox\" type=\"checkbox\" onClick={this.check}></input> \n            <p> {this.props.text}</p>\n        </div>\n        \n    );\n  }\n\n  \n}\n\nexport default Todo;\n","import React, { Component } from 'react';\nimport './NewTodo.css';\n\nclass NewTodo extends Component {\n  render() {\n    return (\n      <form>\n        {/* <input type=\"text\" id=\"addedTask\" placeholder=\"Type in your To-Do's here!\"></input>  */}\n        <input  placeholder=\"Type in your To-Do's here!\" id=\"addedTask\" placeholder=\"Type in your To-Do's here!\" value={this.props.input} onChange={this.props.onChange} />\n        <button id=\"submit\" className=\"submit\" onClick={this.props.addToDos}>Submit</button>\n      </form>\n    );\n  }\n}\n\nexport default NewTodo;","import React, { Component } from 'react';\nimport './App.css';\nimport Todo from './todo'; \nimport NewTodo from './NewTodo';\n\nclass App extends Component {\n\n  // SAVE POINT 9:17 PM\n\n  //CONSTRUCTOR METHOD\n  constructor() {\n    super();\n    // Don't call this.setState() here!\n    this.state = { todos: [], input:' '}; //set todo items as an array\n    this.componentDidMount = this.componentDidMount.bind(this);\n    this.addToDos = this.addToDos.bind(this);\n    this.delete = this.delete.bind(this); \n    this.onChange = this.onChange.bind(this); \n    this.sortAlphabetically = this.sortAlphabetically.bind(this);\n  }\n\n\n  componentDidMount(){\n    var currComponent = this;\n    //Make initial AJAX call to list Todos -- CHECK!! \n    var xhttp = new XMLHttpRequest();\n \n    xhttp.onreadystatechange = function() { //process the AJAX response\n      if (this.readyState == 4 && this.status == 200) { //checkMark to see if it's working\n        //returns an array of objects as JSON (each object will be a ToDo that has been previously submitted with my API key) JSON.parse() parses this JSON into a usable array\n        var todosResponse = JSON.parse(this.responseText); //NOTE: this array will be empty before we have successfully submitted any ToDos\n        currComponent.setState({todos: todosResponse});\n\n        console.log(todosResponse);\n      }\n    };\n\n    xhttp.open(\"GET\", \"https://cse204.work/todos\", true); //AJAX call GET request to cse 204 API \n    xhttp.setRequestHeader(\"x-api-key\",\"e678e1-b3de89-352f09-13b587-042016\"); //API key must be sent as an x-api-key header\n    xhttp.send();\n  }\n\n  addToDos(event) {\n    event.preventDefault();\n    var xhttp2 = new XMLHttpRequest();\n    var currComponent = this; //used currComponent instead of self \n    const newText = this.state.input;\n    var value = { text: newText };\n    //Grab input data from new todo?\n\n    xhttp2.onreadystatechange = function() {\n      // IF READYSTATE ****\n      //if SUCCESSFUL, return a single object containing the ToDo item that has been saved\n      if (this.readyState == 4 && this.status == 200) {     \n\n        //data = JSON.parse(this.responseText);\n        //this.setState({ todos: [data, ...this.state.todos] }) \n        //change input state?\n\n        currComponent.setState({\n          todos: [...currComponent.state.todos, JSON.parse(this.responseText)]\n        })\n        // clear the input field\n        currComponent.setState({ input: '' });\n      }\n\n      else if (this.readyState == 4) { //if UNSUCCESSFUL, this POST request will return a text error\n        console.log(this.responseText);\n      }\n    };\n  \n    xhttp2.open(\"POST\", \"https://cse204.work/todos\", true);\n    xhttp2.setRequestHeader(\"Content-type\", \"application/json\");\n    xhttp2.setRequestHeader(\"x-api-key\", \"e678e1-b3de89-352f09-13b587-042016\");\n\n    xhttp2.send(JSON.stringify(value)); \n\n    // read the input value from state\n    const newTodoText = this.state.input;\n    // Do AJAX\n    // Inside your AJAX success\n    this.state.input = '';\n  }\n\n\n  //ON CHANGE EVENT TO UPDATE STATE WHEN THE INPUT IS CHANGED\n  onChange(event){\n    //set the state to the value of the input \n    this.setState({\n      input: event.target.value\n    });\n  }\n\n  delete(event){\n    event.preventDefault(); \n    var currComponent = this;\n    var deleting = event.target.parentNode.id;\n    var xhttp3 = new XMLHttpRequest();\n\n    xhttp3.onreadystatechange = function () {\n      if (this.readyState === 4 && this.status === 200) {\n        // You need the id of the todo you want to delete as a variable.\n        const remainingTodos = currComponent.state.todos.filter((todo) => {\n          // Looping through all todos, if the id of the current todo DOES NOT equal the id of the todo we want to delete, keep it\n          if (todo.id !== deleting) {\n            return todo;\n          }\n        });\n        // Update state with filtered list using this.setState();\n        currComponent.setState({ todos: remainingTodos });\n      }\n    };\n\n    xhttp3.open(\"DELETE\", \"https://cse204.work/todos/\" + deleting, true);\n    xhttp3.setRequestHeader(\"x-api-key\", \"e678e1-b3de89-352f09-13b587-042016\");\n    xhttp3.send();\n\n  } \n\n  //SORT EVENT HANDLER-- sorts array alphabetically using localCompare\n  sortAlphabetically(event) {\n    var todos = this.state.todos;\n    todos.sort(function (a, b) {\n      return a.text.localeCompare(b.text);\n    });\n    this.setState({ todos: todos })\n  }\n\n\n  render() {\n    return (\n      <div id=\"header\" class=\"header\">\n\n            <div className=\"title\">\n                <p><h1> M Y &nbsp;&nbsp;T O - D O &nbsp;&nbsp;L I S T </h1></p>\n            </div>\n\n            <div className=\"introduction\">\n                <p><h1>Welcome to Victoria and Gwyneth's To-Do list. Type in your task and you can check it off once completed, or delete it from the list.</h1></p>\n            </div>\n        \n            <div id=\"border\"> </div>\n            <section id=\"containerToDos\"> \n\n            {/* //CHECK IF THIS LINE IS RIGHT */}\n            <NewTodo addToDos={this.addToDos} onChange={this.onChange} input={this.state.input}/>\n            <button id = \"sort\" className=\"sort\" onClick={this.sortAlphabetically}>Sort By Alphabetical Order</button>\n\n            {/* /* // STEP 4 : Render Todo componenent for each Todo item\n            // USE MAP FUNCTION TO ITERATE OVER TODO ARRAY defined above */}\n\n            {\n              this.state.todos.map((todo) => \n                <Todo key={todo.id} id={todo.id} text={todo.text} delete={this.delete} completed={todo.completed}/> \n              )\n            }\n\n            </section>\n      </div>\n\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}